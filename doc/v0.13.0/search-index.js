var searchIndex = {};
searchIndex["postgres"] = {"doc":"A pure-Rust frontend for the popular PostgreSQL database.","items":[[3,"LoggingNoticeHandler","postgres","A notice handler which logs at the `info` level.",null,null],[3,"CancelData","","Contains information necessary to cancel queries for a session.",null,null],[12,"process_id","","The process ID of the session.",0,null],[12,"secret_key","","The secret key for the session.",0,null],[3,"Connection","","A connection to a Postgres database.",null,null],[4,"TlsMode","","Specifies the TLS support requested for a new connection.",null,null],[13,"None","","The connection will not use TLS.",1,null],[13,"Prefer","","The connection will use TLS if the backend supports it.",1,null],[13,"Require","","The connection must use TLS.",1,null],[5,"cancel_query","","Attempts to cancel an in-progress query.",null,{"inputs":[{"name":"t"},{"name":"tlsmode"},{"name":"canceldata"}],"output":{"name":"result"}}],[0,"error","","Error types.",null,null],[3,"DbError","postgres::error","A Postgres error or notice.",null,null],[12,"severity","","The field contents are ERROR, FATAL, or PANIC (in an error message),\nor WARNING, NOTICE, DEBUG, INFO, or LOG (in a notice message), or a\nlocalized translation of one of these.",2,null],[12,"code","","The SQLSTATE code for the error.",2,null],[12,"message","","The primary human-readable error message. This should be accurate but\nterse (typically one line).",2,null],[12,"detail","","An optional secondary error message carrying more detail about the\nproblem. Might run to multiple lines.",2,null],[12,"hint","","An optional suggestion what to do about the problem. This is intended\nto differ from Detail in that it offers advice (potentially\ninappropriate) rather than hard facts. Might run to multiple lines.",2,null],[12,"position","","An optional error cursor position into either the original query string\nor an internally generated query.",2,null],[12,"where_","","An indication of the context in which the error occurred. Presently\nthis includes a call stack traceback of active procedural language\nfunctions and internally-generated queries. The trace is one entry per\nline, most recent first.",2,null],[12,"schema","","If the error was associated with a specific database object, the name\nof the schema containing that object, if any. (PostgreSQL 9.3+)",2,null],[12,"table","","If the error was associated with a specific table, the name of the\ntable. (Refer to the schema name field for the name of the table&#39;s\nschema.) (PostgreSQL 9.3+)",2,null],[12,"column","","If the error was associated with a specific table column, the name of\nthe column. (Refer to the schema and table name fields to identify the\ntable.) (PostgreSQL 9.3+)",2,null],[12,"datatype","","If the error was associated with a specific data type, the name of the\ndata type. (Refer to the schema name field for the name of the data\ntype&#39;s schema.) (PostgreSQL 9.3+)",2,null],[12,"constraint","","If the error was associated with a specific constraint, the name of the\nconstraint. Refer to fields listed above for the associated table or\ndomain. (For this purpose, indexes are treated as constraints, even if\nthey weren&#39;t created with constraint syntax.) (PostgreSQL 9.3+)",2,null],[12,"file","","The file name of the source-code location where the error was reported.",2,null],[12,"line","","The line number of the source-code location where the error was\nreported.",2,null],[12,"routine","","The name of the source-code routine reporting the error.",2,null],[4,"SqlState","","SQLSTATE error codes",null,null],[13,"SuccessfulCompletion","","`00000`",3,null],[13,"Warning","","`01000`",3,null],[13,"DynamicResultSetsReturned","","`0100C`",3,null],[13,"ImplicitZeroBitPadding","","`01008`",3,null],[13,"NullValueEliminatedInSetFunction","","`01003`",3,null],[13,"PrivilegeNotGranted","","`01007`",3,null],[13,"PrivilegeNotRevoked","","`01006`",3,null],[13,"WarningStringDataRightTruncation","","`01004`",3,null],[13,"DeprecatedFeature","","`01P01`",3,null],[13,"NoData","","`02000`",3,null],[13,"NoAdditionalDynamicResultSetsReturned","","`02001`",3,null],[13,"SqlStatementNotYetComplete","","`03000`",3,null],[13,"ConnectionException","","`08000`",3,null],[13,"ConnectionDoesNotExist","","`08003`",3,null],[13,"ConnectionFailure","","`08006`",3,null],[13,"SqlclientUnableToEstablishSqlconnection","","`08001`",3,null],[13,"SqlserverRejectedEstablishmentOfSqlconnection","","`08004`",3,null],[13,"TransactionResolutionUnknown","","`08007`",3,null],[13,"ProtocolViolation","","`08P01`",3,null],[13,"TriggeredActionException","","`09000`",3,null],[13,"FeatureNotSupported","","`0A000`",3,null],[13,"InvalidTransactionInitiation","","`0B000`",3,null],[13,"LocatorException","","`0F000`",3,null],[13,"InvalidLocatorSpecification","","`0F001`",3,null],[13,"InvalidGrantor","","`0L000`",3,null],[13,"InvalidGrantOperation","","`0LP01`",3,null],[13,"InvalidRoleSpecification","","`0P000`",3,null],[13,"DiagnosticsException","","`0Z000`",3,null],[13,"StackedDiagnosticsAccessedWithoutActiveHandler","","`0Z002`",3,null],[13,"CaseNotFound","","`20000`",3,null],[13,"CardinalityViolation","","`21000`",3,null],[13,"DataException","","`22000`",3,null],[13,"ArraySubscriptError","","`2202E`",3,null],[13,"CharacterNotInRepertoire","","`22021`",3,null],[13,"DatetimeFieldOverflow","","`22008`",3,null],[13,"DivisionByZero","","`22012`",3,null],[13,"ErrorInAssignment","","`22005`",3,null],[13,"EscapeCharacterConflict","","`2200B`",3,null],[13,"IndicatorOverflow","","`22022`",3,null],[13,"IntervalFieldOverflow","","`22015`",3,null],[13,"InvalidArgumentForLogarithm","","`2201E`",3,null],[13,"InvalidArgumentForNtileFunction","","`22014`",3,null],[13,"InvalidArgumentForNthValueFunction","","`22016`",3,null],[13,"InvalidArgumentForPowerFunction","","`2201F`",3,null],[13,"InvalidArgumentForWidthBucketFunction","","`2201G`",3,null],[13,"InvalidCharacterValueForCast","","`22018`",3,null],[13,"InvalidDatetimeFormat","","`22007`",3,null],[13,"InvalidEscapeCharacter","","`22019`",3,null],[13,"InvalidEscapeOctet","","`2200D`",3,null],[13,"InvalidEscapeSequence","","`22025`",3,null],[13,"NonstandardUseOfEscapeCharacter","","`22P06`",3,null],[13,"InvalidIndicatorParameterValue","","`22010`",3,null],[13,"InvalidParameterValue","","`22023`",3,null],[13,"InvalidRegularExpression","","`2201B`",3,null],[13,"InvalidRowCountInLimitClause","","`2201W`",3,null],[13,"InvalidRowCountInResultOffsetClause","","`2201X`",3,null],[13,"InvalidTablesampleArgument","","`2202H`",3,null],[13,"InvalidTablesampleRepeat","","`2202G`",3,null],[13,"InvalidTimeZoneDisplacementValue","","`22009`",3,null],[13,"InvalidUseOfEscapeCharacter","","`2200C`",3,null],[13,"MostSpecificTypeMismatch","","`2200G`",3,null],[13,"DataNullValueNotAllowed","","`22004`",3,null],[13,"NullValueNoIndicatorParameter","","`22002`",3,null],[13,"NumericValueOutOfRange","","`22003`",3,null],[13,"StringDataLengthMismatch","","`22026`",3,null],[13,"DataStringDataRightTruncation","","`22001`",3,null],[13,"SubstringError","","`22011`",3,null],[13,"TrimError","","`22027`",3,null],[13,"UnterminatedCString","","`22024`",3,null],[13,"ZeroLengthCharacterString","","`2200F`",3,null],[13,"FloatingPointException","","`22P01`",3,null],[13,"InvalidTextRepresentation","","`22P02`",3,null],[13,"InvalidBinaryRepresentation","","`22P03`",3,null],[13,"BadCopyFileFormat","","`22P04`",3,null],[13,"UntranslatableCharacter","","`22P05`",3,null],[13,"NotAnXmlDocument","","`2200L`",3,null],[13,"InvalidXmlDocument","","`2200M`",3,null],[13,"InvalidXmlContent","","`2200N`",3,null],[13,"InvalidXmlComment","","`2200S`",3,null],[13,"InvalidXmlProcessingInstruction","","`2200T`",3,null],[13,"IntegrityConstraintViolation","","`23000`",3,null],[13,"RestrictViolation","","`23001`",3,null],[13,"NotNullViolation","","`23502`",3,null],[13,"ForeignKeyViolation","","`23503`",3,null],[13,"UniqueViolation","","`23505`",3,null],[13,"CheckViolation","","`23514`",3,null],[13,"ExclusionViolation","","`23P01`",3,null],[13,"InvalidCursorState","","`24000`",3,null],[13,"InvalidTransactionState","","`25000`",3,null],[13,"ActiveSqlTransaction","","`25001`",3,null],[13,"BranchTransactionAlreadyActive","","`25002`",3,null],[13,"HeldCursorRequiresSameIsolationLevel","","`25008`",3,null],[13,"InappropriateAccessModeForBranchTransaction","","`25003`",3,null],[13,"InappropriateIsolationLevelForBranchTransaction","","`25004`",3,null],[13,"NoActiveSqlTransactionForBranchTransaction","","`25005`",3,null],[13,"ReadOnlySqlTransaction","","`25006`",3,null],[13,"SchemaAndDataStatementMixingNotSupported","","`25007`",3,null],[13,"NoActiveSqlTransaction","","`25P01`",3,null],[13,"InFailedSqlTransaction","","`25P02`",3,null],[13,"IdleInTransactionSessionTimeout","","`25P03`",3,null],[13,"InvalidSqlStatementName","","`26000`",3,null],[13,"TriggeredDataChangeViolation","","`27000`",3,null],[13,"InvalidAuthorizationSpecification","","`28000`",3,null],[13,"InvalidPassword","","`28P01`",3,null],[13,"DependentPrivilegeDescriptorsStillExist","","`2B000`",3,null],[13,"DependentObjectsStillExist","","`2BP01`",3,null],[13,"InvalidTransactionTermination","","`2D000`",3,null],[13,"SqlRoutineException","","`2F000`",3,null],[13,"FunctionExecutedNoReturnStatement","","`2F005`",3,null],[13,"SqlRoutineModifyingSqlDataNotPermitted","","`2F002`",3,null],[13,"SqlRoutineProhibitedSqlStatementAttempted","","`2F003`",3,null],[13,"SqlRoutineReadingSqlDataNotPermitted","","`2F004`",3,null],[13,"InvalidCursorName","","`34000`",3,null],[13,"ExternalRoutineException","","`38000`",3,null],[13,"ContainingSqlNotPermitted","","`38001`",3,null],[13,"ForeignRoutineModifyingSqlDataNotPermitted","","`38002`",3,null],[13,"ForeignRoutineProhibitedSqlStatementAttempted","","`38003`",3,null],[13,"ForeignRoutineReadingSqlDataNotPermitted","","`38004`",3,null],[13,"ExternalRoutineInvocationException","","`39000`",3,null],[13,"InvalidSqlstateReturned","","`39001`",3,null],[13,"ExternalRoutineInvocationNullValueNotAllowed","","`39004`",3,null],[13,"TriggerProtocolViolated","","`39P01`",3,null],[13,"SrfProtocolViolated","","`39P02`",3,null],[13,"EventTriggerProtocolViolated","","`39P03`",3,null],[13,"SavepointException","","`3B000`",3,null],[13,"InvalidSavepointSpecification","","`3B001`",3,null],[13,"InvalidCatalogName","","`3D000`",3,null],[13,"InvalidSchemaName","","`3F000`",3,null],[13,"TransactionRollback","","`40000`",3,null],[13,"TransactionIntegrityConstraintViolation","","`40002`",3,null],[13,"SerializationFailure","","`40001`",3,null],[13,"StatementCompletionUnknown","","`40003`",3,null],[13,"DeadlockDetected","","`40P01`",3,null],[13,"SyntaxErrorOrAccessRuleViolation","","`42000`",3,null],[13,"SyntaxError","","`42601`",3,null],[13,"InsufficientPrivilege","","`42501`",3,null],[13,"CannotCoerce","","`42846`",3,null],[13,"GroupingError","","`42803`",3,null],[13,"WindowingError","","`42P20`",3,null],[13,"InvalidRecursion","","`42P19`",3,null],[13,"InvalidForeignKey","","`42830`",3,null],[13,"InvalidName","","`42602`",3,null],[13,"NameTooLong","","`42622`",3,null],[13,"ReservedName","","`42939`",3,null],[13,"DatatypeMismatch","","`42804`",3,null],[13,"IndeterminateDatatype","","`42P18`",3,null],[13,"CollationMismatch","","`42P21`",3,null],[13,"IndeterminateCollation","","`42P22`",3,null],[13,"WrongObjectType","","`42809`",3,null],[13,"UndefinedColumn","","`42703`",3,null],[13,"UndefinedFunction","","`42883`",3,null],[13,"UndefinedTable","","`42P01`",3,null],[13,"UndefinedParameter","","`42P02`",3,null],[13,"UndefinedObject","","`42704`",3,null],[13,"DuplicateColumn","","`42701`",3,null],[13,"DuplicateCursor","","`42P03`",3,null],[13,"DuplicateDatabase","","`42P04`",3,null],[13,"DuplicateFunction","","`42723`",3,null],[13,"DuplicatePreparedStatement","","`42P05`",3,null],[13,"DuplicateSchema","","`42P06`",3,null],[13,"DuplicateTable","","`42P07`",3,null],[13,"DuplicateAlias","","`42712`",3,null],[13,"DuplicateObject","","`42710`",3,null],[13,"AmbiguousColumn","","`42702`",3,null],[13,"AmbiguousFunction","","`42725`",3,null],[13,"AmbiguousParameter","","`42P08`",3,null],[13,"AmbiguousAlias","","`42P09`",3,null],[13,"InvalidColumnReference","","`42P10`",3,null],[13,"InvalidColumnDefinition","","`42611`",3,null],[13,"InvalidCursorDefinition","","`42P11`",3,null],[13,"InvalidDatabaseDefinition","","`42P12`",3,null],[13,"InvalidFunctionDefinition","","`42P13`",3,null],[13,"InvalidPreparedStatementDefinition","","`42P14`",3,null],[13,"InvalidSchemaDefinition","","`42P15`",3,null],[13,"InvalidTableDefinition","","`42P16`",3,null],[13,"InvalidObjectDefinition","","`42P17`",3,null],[13,"WithCheckOptionViolation","","`44000`",3,null],[13,"InsufficientResources","","`53000`",3,null],[13,"DiskFull","","`53100`",3,null],[13,"OutOfMemory","","`53200`",3,null],[13,"TooManyConnections","","`53300`",3,null],[13,"ConfigurationLimitExceeded","","`53400`",3,null],[13,"ProgramLimitExceeded","","`54000`",3,null],[13,"StatementTooComplex","","`54001`",3,null],[13,"TooManyColumns","","`54011`",3,null],[13,"TooManyArguments","","`54023`",3,null],[13,"ObjectNotInPrerequisiteState","","`55000`",3,null],[13,"ObjectInUse","","`55006`",3,null],[13,"CantChangeRuntimeParam","","`55P02`",3,null],[13,"LockNotAvailable","","`55P03`",3,null],[13,"OperatorIntervention","","`57000`",3,null],[13,"QueryCanceled","","`57014`",3,null],[13,"AdminShutdown","","`57P01`",3,null],[13,"CrashShutdown","","`57P02`",3,null],[13,"CannotConnectNow","","`57P03`",3,null],[13,"DatabaseDropped","","`57P04`",3,null],[13,"SystemError","","`58000`",3,null],[13,"IoError","","`58030`",3,null],[13,"UndefinedFile","","`58P01`",3,null],[13,"DuplicateFile","","`58P02`",3,null],[13,"SnapshotTooOld","","`72000`",3,null],[13,"ConfigFileError","","`F0000`",3,null],[13,"LockFileExists","","`F0001`",3,null],[13,"FdwError","","`HV000`",3,null],[13,"FdwColumnNameNotFound","","`HV005`",3,null],[13,"FdwDynamicParameterValueNeeded","","`HV002`",3,null],[13,"FdwFunctionSequenceError","","`HV010`",3,null],[13,"FdwInconsistentDescriptorInformation","","`HV021`",3,null],[13,"FdwInvalidAttributeValue","","`HV024`",3,null],[13,"FdwInvalidColumnName","","`HV007`",3,null],[13,"FdwInvalidColumnNumber","","`HV008`",3,null],[13,"FdwInvalidDataType","","`HV004`",3,null],[13,"FdwInvalidDataTypeDescriptors","","`HV006`",3,null],[13,"FdwInvalidDescriptorFieldIdentifier","","`HV091`",3,null],[13,"FdwInvalidHandle","","`HV00B`",3,null],[13,"FdwInvalidOptionIndex","","`HV00C`",3,null],[13,"FdwInvalidOptionName","","`HV00D`",3,null],[13,"FdwInvalidStringLengthOrBufferLength","","`HV090`",3,null],[13,"FdwInvalidStringFormat","","`HV00A`",3,null],[13,"FdwInvalidUseOfNullPointer","","`HV009`",3,null],[13,"FdwTooManyHandles","","`HV014`",3,null],[13,"FdwOutOfMemory","","`HV001`",3,null],[13,"FdwNoSchemas","","`HV00P`",3,null],[13,"FdwOptionNameNotFound","","`HV00J`",3,null],[13,"FdwReplyHandle","","`HV00K`",3,null],[13,"FdwSchemaNotFound","","`HV00Q`",3,null],[13,"FdwTableNotFound","","`HV00R`",3,null],[13,"FdwUnableToCreateExecution","","`HV00L`",3,null],[13,"FdwUnableToCreateReply","","`HV00M`",3,null],[13,"FdwUnableToEstablishConnection","","`HV00N`",3,null],[13,"PlpgsqlError","","`P0000`",3,null],[13,"RaiseException","","`P0001`",3,null],[13,"NoDataFound","","`P0002`",3,null],[13,"TooManyRows","","`P0003`",3,null],[13,"AssertFailure","","`P0004`",3,null],[13,"InternalError","","`XX000`",3,null],[13,"DataCorrupted","","`XX001`",3,null],[13,"IndexCorrupted","","`XX002`",3,null],[13,"Other","","An unknown code",3,null],[4,"ConnectError","","Reasons a new Postgres connection could fail.",null,null],[13,"ConnectParams","","An error relating to connection parameters.",4,null],[13,"Db","","An error from the Postgres server itself.",4,null],[13,"Tls","","An error initializing the TLS session.",4,null],[13,"Io","","An error communicating with the server.",4,null],[4,"ErrorPosition","","Represents the position of an error in a query.",null,null],[13,"Normal","","A position in the original query.",5,null],[13,"Internal","","A position in an internally generated query.",5,null],[12,"position","postgres::error::ErrorPosition","The byte position.",5,null],[12,"query","","A query generated by the Postgres server.",5,null],[4,"Error","postgres::error","An error encountered when communicating with the Postgres server.",null,null],[13,"Db","","An error reported by the Postgres server.",6,null],[13,"Io","","An error communicating with the Postgres server.",6,null],[13,"Conversion","","An error converting between Postgres and Rust types.",6,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"from_code","","Creates a `SqlState` from its error code.",3,{"inputs":[{"name":"string"}],"output":{"name":"sqlstate"}}],[11,"code","","Returns the error code corresponding to the `SqlState`.",3,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"description","","",4,null],[11,"cause","","",4,null],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"connecterror"}}],[11,"from","","",4,{"inputs":[{"name":"dberror"}],"output":{"name":"connecterror"}}],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"cause","","",6,null],[11,"from","","",6,{"inputs":[{"name":"dberror"}],"output":{"name":"error"}}],[11,"from","","",6,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[0,"tls","postgres","Types and traits for TLS support.",null,null],[3,"Stream","postgres::tls","A connection to the Postgres server.",null,null],[0,"openssl","","OpenSSL support.",null,null],[3,"OpenSsl","postgres::tls::openssl","A `TlsHandshake` implementation that uses OpenSSL.",null,null],[11,"fmt","","",7,null],[11,"new","","Creates a `OpenSsl` with `SslConnector`&#39;s default configuration.",7,{"inputs":[],"output":{"name":"result"}}],[11,"connector","","Returns a reference to the inner `SslConnector`.",7,null],[11,"connector_mut","","Returns a mutable reference to the inner `SslConnector`.",7,null],[11,"from","","",7,{"inputs":[{"name":"sslconnector"}],"output":{"name":"openssl"}}],[11,"tls_handshake","","",7,null],[0,"security_framework","postgres::tls","Security Framework support.",null,null],[3,"SecurityFramework","postgres::tls::security_framework","A `TlsHandshake` implementation that uses the Security Framework.",null,null],[11,"fmt","","",8,null],[11,"new","","Returns a new `SecurityFramework` with default settings.",8,{"inputs":[],"output":{"name":"securityframework"}}],[11,"builder","","Returns a reference to the associated `ClientBuilder`.",8,null],[11,"builder_mut","","Returns a mutable reference to the associated `ClientBuilder`.",8,null],[11,"from","","",8,{"inputs":[{"name":"clientbuilder"}],"output":{"name":"securityframework"}}],[11,"tls_handshake","","",8,null],[8,"TlsStream","postgres::tls","A trait implemented by TLS streams.",null,null],[10,"get_ref","","Returns a reference to the underlying `Stream`.",9,null],[10,"get_mut","","Returns a mutable reference to the underlying `Stream`.",9,null],[8,"TlsHandshake","","A trait implemented by types that can initiate a TLS session over a Postgres\nstream.",null,null],[10,"tls_handshake","","Performs a client-side TLS handshake, returning a wrapper around the\nprovided stream.",10,null],[0,"notification","postgres","Asynchronous notifications.",null,null],[3,"Notification","postgres::notification","An asynchronous notification.",null,null],[12,"process_id","","The process ID of the notifying backend process.",11,null],[12,"channel","","The name of the channel that the notify has been raised on.",11,null],[12,"payload","","The &quot;payload&quot; string passed from the notifying process.",11,null],[3,"Notifications","","Notifications from the Postgres backend.",null,null],[3,"Iter","","A fallible iterator over pending notifications.",null,null],[3,"BlockingIter","","An iterator over notifications which will block if none are pending.",null,null],[3,"TimeoutIter","","An iterator over notifications which will block for a period of time if\nnone are pending.",null,null],[11,"fmt","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",12,null],[11,"len","","Returns the number of pending notifications.",12,null],[11,"is_empty","","Determines if there are any pending notifications.",12,null],[11,"iter","","Returns a fallible iterator over pending notifications.",12,null],[11,"blocking_iter","","Returns a fallible iterator over notifications that blocks until one is\nreceived if none are pending.",12,null],[11,"timeout_iter","","Returns a fallible iterator over notifications that blocks for a limited\ntime waiting to receive one if none are pending.",12,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next","","",14,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[0,"params","postgres","Connection parameters",null,null],[3,"UserInfo","postgres::params","Authentication information.",null,null],[12,"user","","The username.",16,null],[12,"password","","An optional password.",16,null],[3,"ConnectParams","","Information necessary to open a new connection to a Postgres server.",null,null],[12,"target","","The target server.",17,null],[12,"port","","The target port.",17,null],[12,"user","","The user to login as.",17,null],[12,"database","","The database to connect to.",17,null],[12,"options","","Runtime parameters to be passed to the Postgres backend.",17,null],[4,"ConnectTarget","","Specifies the target server to connect to.",null,null],[13,"Tcp","","Connect via TCP to the specified host.",18,null],[13,"Unix","","Connect via a Unix domain socket in the specified directory.",18,null],[8,"IntoConnectParams","","A trait implemented by types that can be converted into a `ConnectParams`.",null,null],[10,"into_connect_params","","Converts the value of `self` into a `ConnectParams`.",19,null],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"fmt","","",16,null],[11,"clone","","",16,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"into_connect_params","","",17,null],[0,"rows","postgres","Query result rows.",null,null],[3,"Rows","postgres::rows","The resulting rows of a query.",null,null],[3,"Iter","","An iterator over `Row`s.",null,null],[3,"Row","","A single result row of a query.",null,null],[3,"LazyRows","","A lazily-loaded iterator over the resulting rows of a query.",null,null],[8,"RowIndex","","A trait implemented by types that can index into columns of a row.",null,null],[10,"idx","","Returns the index of the appropriate column, or `None` if no such\ncolumn exists.",20,null],[11,"fmt","","",21,null],[11,"columns","","Returns a slice describing the columns of the `Rows`.",21,null],[11,"len","","Returns the number of rows present.",21,null],[11,"is_empty","","Determines if there are any rows present.",21,null],[11,"get","","Returns a specific `Row`.",21,null],[11,"iter","","Returns an iterator over the `Row`s.",21,null],[11,"next","","",22,null],[11,"size_hint","","",22,null],[11,"next_back","","",22,null],[11,"fmt","","",23,null],[11,"len","","Returns the number of values in the row.",23,null],[11,"is_empty","","Determines if there are any values in the row.",23,null],[11,"columns","","Returns a slice describing the columns of the `Row`.",23,null],[11,"get","","Retrieves the contents of a field of the row.",23,null],[11,"get_opt","","Retrieves the contents of a field of the row.",23,null],[11,"get_bytes","","Retrieves the specified field as a raw buffer of Postgres data.",23,null],[11,"drop","","",24,null],[11,"fmt","","",24,null],[11,"columns","","Returns a slice describing the columns of the `LazyRows`.",24,null],[11,"finish","","Consumes the `LazyRows`, cleaning up associated state.",24,null],[11,"next","","",24,null],[11,"size_hint","","",24,null],[0,"stmt","postgres","Prepared statements",null,null],[3,"Statement","postgres::stmt","A prepared statement.",null,null],[3,"Column","","Information about a column of the result of a query.",null,null],[3,"CopyInfo","","A struct containing information relevant for a `COPY` operation.",null,null],[4,"Format","","The format of a portion of COPY query data.",null,null],[13,"Text","","A text based format.",25,null],[13,"Binary","","A binary format.",25,null],[8,"ReadWithInfo","","Like `Read` except that a `CopyInfo` object is provided as well.",null,null],[10,"read_with_info","","Like `Read::read`.",26,null],[8,"WriteWithInfo","","Like `Write` except that a `CopyInfo` object is provided as well.",null,null],[10,"write_with_info","","Like `Write::write`.",27,null],[11,"fmt","","",28,null],[11,"drop","","",28,null],[11,"param_types","","Returns a slice containing the expected parameter types.",28,null],[11,"columns","","Returns a slice describing the columns of the result of the query.",28,null],[11,"execute","","Executes the prepared statement, returning the number of rows modified.",28,null],[11,"query","","Executes the prepared statement, returning the resulting rows.",28,null],[11,"lazy_query","","Executes the prepared statement, returning a lazily loaded iterator\nover the resulting rows.",28,null],[11,"copy_in","","Executes a `COPY FROM STDIN` statement, returning the number of rows\nadded.",28,null],[11,"copy_out","","Executes a `COPY TO STDOUT` statement, passing the resulting data to\nthe provided writer and returning the number of rows received.",28,null],[11,"finish","","Consumes the statement, clearing it from the Postgres session.",28,null],[11,"fmt","","",29,null],[11,"clone","","",29,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"name","","The name of the column.",29,null],[11,"type_","","The type of the data in the column.",29,null],[11,"format","","Returns the format of the overall data.",30,null],[11,"column_formats","","Returns the format of the individual columns.",30,null],[11,"session_info","","Returns session info for the associated connection.",30,null],[11,"eq","","",25,null],[11,"clone","","",25,null],[11,"fmt","","",25,null],[0,"transaction","postgres","Transactions",null,null],[3,"Config","postgres::transaction","Configuration of a transaction.",null,null],[3,"Transaction","","A transaction on a database connection.",null,null],[4,"IsolationLevel","","An enumeration of transaction isolation levels.",null,null],[13,"ReadUncommitted","","The &quot;read uncommitted&quot; level.",31,null],[13,"ReadCommitted","","The &quot;read committed&quot; level.",31,null],[13,"RepeatableRead","","The &quot;repeatable read&quot; level.",31,null],[13,"Serializable","","The &quot;serializable&quot; level.",31,null],[11,"eq","","",31,null],[11,"clone","","",31,null],[11,"fmt","","",31,null],[11,"fmt","","",32,null],[11,"default","","",32,{"inputs":[],"output":{"name":"config"}}],[11,"new","","Creates a new `Config` with no configuration overrides.",32,{"inputs":[],"output":{"name":"config"}}],[11,"isolation_level","","Sets the isolation level of the configuration.",32,null],[11,"read_only","","Sets the read-only property of a transaction.",32,null],[11,"deferrable","","Sets the deferrable property of a transaction.",32,null],[11,"fmt","","",33,null],[11,"drop","","",33,null],[11,"prepare","","Like `Connection::prepare`.",33,null],[11,"prepare_cached","","Like `Connection::prepare_cached`.",33,null],[11,"execute","","Like `Connection::execute`.",33,null],[11,"query","","Like `Connection::query`.",33,null],[11,"batch_execute","","Like `Connection::batch_execute`.",33,null],[11,"transaction","","Like `Connection::transaction`, but creates a nested transaction via\na savepoint.",33,null],[11,"savepoint","","Like `Connection::transaction`, but creates a nested transaction via\na savepoint with the specified name.",33,null],[11,"connection","","Returns a reference to the `Transaction`&#39;s `Connection`.",33,null],[11,"is_active","","Like `Connection::is_active`.",33,null],[11,"set_config","","Alters the configuration of the active transaction.",33,null],[11,"will_commit","","Determines if the transaction is currently set to commit or roll back.",33,null],[11,"set_commit","","Sets the transaction to commit at its completion.",33,null],[11,"set_rollback","","Sets the transaction to roll back at its completion.",33,null],[11,"commit","","A convenience method which consumes and commits a transaction.",33,null],[11,"finish","","Consumes the transaction, commiting or rolling it back as appropriate.",33,null],[0,"types","postgres","Traits dealing with Postgres data types",null,null],[6,"Oid","postgres::types","",null,null],[3,"SessionInfo","","A structure providing information for conversion methods.",null,null],[3,"Field","","Information about a field of a composite type.",null,null],[3,"Other","","Information about an unknown type.",null,null],[3,"WasNull","","An error indicating that a `NULL` Postgres value was passed to a `FromSql`\nimplementation that does not support `NULL` values.",null,null],[3,"WrongType","","An error indicating that a conversion was attempted between incompatible\nRust and Postgres types.",null,null],[4,"Type","","A Postgres type.",null,null],[13,"Bool","","BOOL - boolean, &amp;#39;true&amp;#39;/&amp;#39;false&amp;#39;",34,null],[13,"Bytea","","BYTEA - variable-length string, binary values escaped",34,null],[13,"Char","","CHAR - single character",34,null],[13,"Name","","NAME - 63-byte type for storing system identifiers",34,null],[13,"Int8","","INT8 - ~18 digit integer, 8-byte storage",34,null],[13,"Int2","","INT2 - -32 thousand to 32 thousand, 2-byte storage",34,null],[13,"Int2Vector","","INT2VECTOR - array of int2, used in system tables",34,null],[13,"Int4","","INT4 - -2 billion to 2 billion integer, 4-byte storage",34,null],[13,"Regproc","","REGPROC - registered procedure",34,null],[13,"Text","","TEXT - variable-length string, no limit specified",34,null],[13,"Oid","","OID - object identifier&amp;#40;oid&amp;#41;, maximum 4 billion",34,null],[13,"Tid","","TID - &amp;#40;block, offset&amp;#41;, physical location of tuple",34,null],[13,"Xid","","XID - transaction id",34,null],[13,"Cid","","CID - command identifier type, sequence in transaction id",34,null],[13,"OidVector","","OIDVECTOR - array of oids, used in system tables",34,null],[13,"PgDdlCommand","","PG_DDL_COMMAND - internal type for passing CollectedCommand",34,null],[13,"Json","","JSON",34,null],[13,"Xml","","XML - XML content",34,null],[13,"XmlArray","","XML&amp;#91;&amp;#93;",34,null],[13,"PgNodeTree","","PG_NODE_TREE - string representing an internal node tree",34,null],[13,"JsonArray","","JSON&amp;#91;&amp;#93;",34,null],[13,"Smgr","","SMGR - storage manager",34,null],[13,"IndexAmHandler","","INDEX_AM_HANDLER",34,null],[13,"Point","","POINT - geometric point &amp;#39;&amp;#40;x, y&amp;#41;&amp;#39;",34,null],[13,"Lseg","","LSEG - geometric line segment &amp;#39;&amp;#40;pt1,pt2&amp;#41;&amp;#39;",34,null],[13,"Path","","PATH - geometric path &amp;#39;&amp;#40;pt1,...&amp;#41;&amp;#39;",34,null],[13,"Box","","BOX - geometric box &amp;#39;&amp;#40;lower left,upper right&amp;#41;&amp;#39;",34,null],[13,"Polygon","","POLYGON - geometric polygon &amp;#39;&amp;#40;pt1,...&amp;#41;&amp;#39;",34,null],[13,"Line","","LINE - geometric line",34,null],[13,"LineArray","","LINE&amp;#91;&amp;#93;",34,null],[13,"Cidr","","CIDR - network IP address/netmask, network address",34,null],[13,"CidrArray","","CIDR&amp;#91;&amp;#93;",34,null],[13,"Float4","","FLOAT4 - single-precision floating point number, 4-byte storage",34,null],[13,"Float8","","FLOAT8 - double-precision floating point number, 8-byte storage",34,null],[13,"Abstime","","ABSTIME - absolute, limited-range date and time &amp;#40;Unix system time&amp;#41;",34,null],[13,"Reltime","","RELTIME - relative, limited-range time interval &amp;#40;Unix delta time&amp;#41;",34,null],[13,"Tinterval","","TINTERVAL - &amp;#40;abstime,abstime&amp;#41;, time interval",34,null],[13,"Unknown","","UNKNOWN",34,null],[13,"Circle","","CIRCLE - geometric circle &amp;#39;&amp;#40;center,radius&amp;#41;&amp;#39;",34,null],[13,"CircleArray","","CIRCLE&amp;#91;&amp;#93;",34,null],[13,"Money","","MONEY - monetary amounts, &amp;#36;d,ddd.cc",34,null],[13,"MoneyArray","","MONEY&amp;#91;&amp;#93;",34,null],[13,"Macaddr","","MACADDR - XX:XX:XX:XX:XX:XX, MAC address",34,null],[13,"Inet","","INET - IP address/netmask, host address, netmask optional",34,null],[13,"BoolArray","","BOOL&amp;#91;&amp;#93;",34,null],[13,"ByteaArray","","BYTEA&amp;#91;&amp;#93;",34,null],[13,"CharArray","","CHAR&amp;#91;&amp;#93;",34,null],[13,"NameArray","","NAME&amp;#91;&amp;#93;",34,null],[13,"Int2Array","","INT2&amp;#91;&amp;#93;",34,null],[13,"Int2VectorArray","","INT2VECTOR&amp;#91;&amp;#93;",34,null],[13,"Int4Array","","INT4&amp;#91;&amp;#93;",34,null],[13,"RegprocArray","","REGPROC&amp;#91;&amp;#93;",34,null],[13,"TextArray","","TEXT&amp;#91;&amp;#93;",34,null],[13,"TidArray","","TID&amp;#91;&amp;#93;",34,null],[13,"XidArray","","XID&amp;#91;&amp;#93;",34,null],[13,"CidArray","","CID&amp;#91;&amp;#93;",34,null],[13,"OidVectorArray","","OIDVECTOR&amp;#91;&amp;#93;",34,null],[13,"BpcharArray","","BPCHAR&amp;#91;&amp;#93;",34,null],[13,"VarcharArray","","VARCHAR&amp;#91;&amp;#93;",34,null],[13,"Int8Array","","INT8&amp;#91;&amp;#93;",34,null],[13,"PointArray","","POINT&amp;#91;&amp;#93;",34,null],[13,"LsegArray","","LSEG&amp;#91;&amp;#93;",34,null],[13,"PathArray","","PATH&amp;#91;&amp;#93;",34,null],[13,"BoxArray","","BOX&amp;#91;&amp;#93;",34,null],[13,"Float4Array","","FLOAT4&amp;#91;&amp;#93;",34,null],[13,"Float8Array","","FLOAT8&amp;#91;&amp;#93;",34,null],[13,"AbstimeArray","","ABSTIME&amp;#91;&amp;#93;",34,null],[13,"ReltimeArray","","RELTIME&amp;#91;&amp;#93;",34,null],[13,"TintervalArray","","TINTERVAL&amp;#91;&amp;#93;",34,null],[13,"PolygonArray","","POLYGON&amp;#91;&amp;#93;",34,null],[13,"OidArray","","OID&amp;#91;&amp;#93;",34,null],[13,"Aclitem","","ACLITEM - access control list",34,null],[13,"AclitemArray","","ACLITEM&amp;#91;&amp;#93;",34,null],[13,"MacaddrArray","","MACADDR&amp;#91;&amp;#93;",34,null],[13,"InetArray","","INET&amp;#91;&amp;#93;",34,null],[13,"Bpchar","","BPCHAR - char&amp;#40;length&amp;#41;, blank-padded string, fixed storage length",34,null],[13,"Varchar","","VARCHAR - varchar&amp;#40;length&amp;#41;, non-blank-padded string, variable storage length",34,null],[13,"Date","","DATE - date",34,null],[13,"Time","","TIME - time of day",34,null],[13,"Timestamp","","TIMESTAMP - date and time",34,null],[13,"TimestampArray","","TIMESTAMP&amp;#91;&amp;#93;",34,null],[13,"DateArray","","DATE&amp;#91;&amp;#93;",34,null],[13,"TimeArray","","TIME&amp;#91;&amp;#93;",34,null],[13,"Timestamptz","","TIMESTAMPTZ - date and time with time zone",34,null],[13,"TimestamptzArray","","TIMESTAMPTZ&amp;#91;&amp;#93;",34,null],[13,"Interval","","INTERVAL - &amp;#64; &amp;lt;number&amp;gt; &amp;lt;units&amp;gt;, time interval",34,null],[13,"IntervalArray","","INTERVAL&amp;#91;&amp;#93;",34,null],[13,"NumericArray","","NUMERIC&amp;#91;&amp;#93;",34,null],[13,"CstringArray","","CSTRING&amp;#91;&amp;#93;",34,null],[13,"Timetz","","TIMETZ - time of day with time zone",34,null],[13,"TimetzArray","","TIMETZ&amp;#91;&amp;#93;",34,null],[13,"Bit","","BIT - fixed-length bit string",34,null],[13,"BitArray","","BIT&amp;#91;&amp;#93;",34,null],[13,"Varbit","","VARBIT - variable-length bit string",34,null],[13,"VarbitArray","","VARBIT&amp;#91;&amp;#93;",34,null],[13,"Numeric","","NUMERIC - numeric&amp;#40;precision, decimal&amp;#41;, arbitrary precision number",34,null],[13,"Refcursor","","REFCURSOR - reference to cursor &amp;#40;portal name&amp;#41;",34,null],[13,"RefcursorArray","","REFCURSOR&amp;#91;&amp;#93;",34,null],[13,"Regprocedure","","REGPROCEDURE - registered procedure &amp;#40;with args&amp;#41;",34,null],[13,"Regoper","","REGOPER - registered operator",34,null],[13,"Regoperator","","REGOPERATOR - registered operator &amp;#40;with args&amp;#41;",34,null],[13,"Regclass","","REGCLASS - registered class",34,null],[13,"Regtype","","REGTYPE - registered type",34,null],[13,"RegprocedureArray","","REGPROCEDURE&amp;#91;&amp;#93;",34,null],[13,"RegoperArray","","REGOPER&amp;#91;&amp;#93;",34,null],[13,"RegoperatorArray","","REGOPERATOR&amp;#91;&amp;#93;",34,null],[13,"RegclassArray","","REGCLASS&amp;#91;&amp;#93;",34,null],[13,"RegtypeArray","","REGTYPE&amp;#91;&amp;#93;",34,null],[13,"Record","","RECORD",34,null],[13,"Cstring","","CSTRING",34,null],[13,"Any","","ANY",34,null],[13,"AnyArray","","ANYARRAY",34,null],[13,"Void","","VOID",34,null],[13,"Trigger","","TRIGGER",34,null],[13,"LanguageHandler","","LANGUAGE_HANDLER",34,null],[13,"Internal","","INTERNAL",34,null],[13,"Opaque","","OPAQUE",34,null],[13,"Anyelement","","ANYELEMENT",34,null],[13,"RecordArray","","RECORD&amp;#91;&amp;#93;",34,null],[13,"Anynonarray","","ANYNONARRAY",34,null],[13,"TxidSnapshotArray","","TXID_SNAPSHOT&amp;#91;&amp;#93;",34,null],[13,"Uuid","","UUID - UUID datatype",34,null],[13,"UuidArray","","UUID&amp;#91;&amp;#93;",34,null],[13,"TxidSnapshot","","TXID_SNAPSHOT - txid snapshot",34,null],[13,"FdwHandler","","FDW_HANDLER",34,null],[13,"PgLsn","","PG_LSN - PostgreSQL LSN datatype",34,null],[13,"PgLsnArray","","PG_LSN&amp;#91;&amp;#93;",34,null],[13,"TsmHandler","","TSM_HANDLER",34,null],[13,"Anyenum","","ANYENUM",34,null],[13,"TsVector","","TSVECTOR - text representation for text search",34,null],[13,"Tsquery","","TSQUERY - query representation for text search",34,null],[13,"GtsVector","","GTSVECTOR - GiST index internal text representation for text search",34,null],[13,"TsVectorArray","","TSVECTOR&amp;#91;&amp;#93;",34,null],[13,"GtsVectorArray","","GTSVECTOR&amp;#91;&amp;#93;",34,null],[13,"TsqueryArray","","TSQUERY&amp;#91;&amp;#93;",34,null],[13,"Regconfig","","REGCONFIG - registered text search configuration",34,null],[13,"RegconfigArray","","REGCONFIG&amp;#91;&amp;#93;",34,null],[13,"Regdictionary","","REGDICTIONARY - registered text search dictionary",34,null],[13,"RegdictionaryArray","","REGDICTIONARY&amp;#91;&amp;#93;",34,null],[13,"Jsonb","","JSONB - Binary JSON",34,null],[13,"JsonbArray","","JSONB&amp;#91;&amp;#93;",34,null],[13,"AnyRange","","ANYRANGE",34,null],[13,"EventTrigger","","EVENT_TRIGGER",34,null],[13,"Int4Range","","INT4RANGE - range of integers",34,null],[13,"Int4RangeArray","","INT4RANGE&amp;#91;&amp;#93;",34,null],[13,"NumRange","","NUMRANGE - range of numerics",34,null],[13,"NumRangeArray","","NUMRANGE&amp;#91;&amp;#93;",34,null],[13,"TsRange","","TSRANGE - range of timestamps without time zone",34,null],[13,"TsRangeArray","","TSRANGE&amp;#91;&amp;#93;",34,null],[13,"TstzRange","","TSTZRANGE - range of timestamps with time zone",34,null],[13,"TstzRangeArray","","TSTZRANGE&amp;#91;&amp;#93;",34,null],[13,"DateRange","","DATERANGE - range of dates",34,null],[13,"DateRangeArray","","DATERANGE&amp;#91;&amp;#93;",34,null],[13,"Int8Range","","INT8RANGE - range of bigints",34,null],[13,"Int8RangeArray","","INT8RANGE&amp;#91;&amp;#93;",34,null],[13,"Regnamespace","","REGNAMESPACE - registered namespace",34,null],[13,"RegnamespaceArray","","REGNAMESPACE&amp;#91;&amp;#93;",34,null],[13,"Regrole","","REGROLE - registered role",34,null],[13,"RegroleArray","","REGROLE&amp;#91;&amp;#93;",34,null],[13,"Other","","An unknown type.",34,null],[4,"Date","","A wrapper that can be used to represent infinity with `Type::Date` types.",null,null],[13,"PosInfinity","","Represents `infinity`, a date that is later than all other dates.",35,null],[13,"NegInfinity","","Represents `-infinity`, a date that is earlier than all other dates.",35,null],[13,"Value","","The wrapped date.",35,null],[4,"Timestamp","","A wrapper that can be used to represent infinity with `Type::Timestamp` and `Type::Timestamptz`\ntypes.",null,null],[13,"PosInfinity","","Represents `infinity`, a timestamp that is later than all other timestamps.",36,null],[13,"NegInfinity","","Represents `-infinity`, a timestamp that is earlier than all other timestamps.",36,null],[13,"Value","","The wrapped timestamp.",36,null],[4,"Kind","","Represents the kind of a Postgres type.",null,null],[13,"Simple","","A simple type like `VARCHAR` or `INTEGER`.",37,null],[13,"Enum","","An enumerated type along with its variants.",37,null],[13,"Pseudo","","A pseudo-type.",37,null],[13,"Array","","An array type along with the type of its elements.",37,null],[13,"Range","","A range type along with the type of its elements.",37,null],[13,"Domain","","A domain type along with its underlying type.",37,null],[13,"Composite","","A composite type along with information about its fields.",37,null],[4,"IsNull","","An enum representing the nullability of a Postgres value.",null,null],[13,"Yes","","The value is NULL.",38,null],[13,"No","","The value is not NULL.",38,null],[11,"eq","","",35,null],[11,"ne","","",35,null],[11,"clone","","",35,null],[11,"fmt","","",35,null],[11,"from_sql","","",35,null],[11,"accepts","","",35,{"inputs":[{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql","","",35,null],[11,"accepts","","",35,{"inputs":[{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql_checked","","",35,null],[11,"eq","","",36,null],[11,"ne","","",36,null],[11,"clone","","",36,null],[11,"fmt","","",36,null],[11,"from_sql","","",36,null],[11,"accepts","","",36,{"inputs":[{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql","","",36,null],[11,"accepts","","",36,{"inputs":[{"name":"type"}],"output":{"name":"bool"}}],[11,"to_sql_checked","","",36,null],[11,"fmt","","",34,null],[11,"clone","","",34,null],[11,"eq","","",34,null],[11,"ne","","",34,null],[11,"fmt","","",34,null],[11,"from_oid","","Returns the `Type` corresponding to the provided `Oid` if it\ncorresponds to a built-in type.",34,{"inputs":[{"name":"oid"}],"output":{"name":"option"}}],[11,"oid","","Returns the OID of the `Type`.",34,null],[11,"kind","","Returns the kind of this type.",34,null],[11,"schema","","Returns the schema of this type.",34,null],[11,"name","","Returns the name of this type.",34,null],[8,"FromSql","","A trait for types that can be created from a Postgres value.",null,null],[10,"from_sql","","Creates a new value of this type from a buffer of data of the specified\nPostgres `Type` in its binary format.",39,null],[11,"from_sql_null","","Creates a new value of this type from a `NULL` SQL value.",39,{"inputs":[{"name":"type"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[11,"from_sql_nullable","","A convenience function that delegates to `from_sql` and `from_sql_null` depending on the\nvalue of `raw`.",39,{"inputs":[{"name":"type"},{"name":"option"},{"name":"sessioninfo"}],"output":{"name":"result"}}],[10,"accepts","","Determines if a value of this type can be created from the specified\nPostgres `Type`.",39,{"inputs":[{"name":"type"}],"output":{"name":"bool"}}],[8,"ToSql","","A trait for types that can be converted into Postgres values.",null,null],[10,"to_sql","","Converts the value of `self` into the binary format of the specified\nPostgres `Type`, appending it to `out`.",40,null],[10,"accepts","","Determines if a value of this type can be converted to the specified\nPostgres `Type`.",40,{"inputs":[{"name":"type"}],"output":{"name":"bool"}}],[10,"to_sql_checked","","An adaptor method used internally by Rust-Postgres.",40,null],[11,"fmt","","",41,null],[11,"parameter","","Returns the value of the specified Postgres backend parameter, such\nas `timezone` or `server_version`.",41,null],[11,"eq","","",37,null],[11,"ne","","",37,null],[11,"clone","","",37,null],[11,"fmt","","",37,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"clone","","",42,null],[11,"fmt","","",42,null],[11,"name","","Returns the name of the field.",42,null],[11,"type_","","Returns the type of the field.",42,null],[11,"clone","","",43,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"fmt","","",43,null],[11,"name","","The name of the type.",43,null],[11,"oid","","The OID of this type.",43,null],[11,"kind","","The kind of this type.",43,null],[11,"schema","","The schema of this type.",43,null],[11,"clone","","",44,null],[11,"fmt","","",44,null],[11,"fmt","","",44,null],[11,"description","","",44,null],[11,"fmt","","",45,null],[11,"fmt","","",45,null],[11,"description","","",45,null],[6,"Result","postgres","A type alias of the result returned by many methods.",null,null],[8,"HandleNotice","","A trait implemented by types that can handle Postgres notice messages.",null,null],[10,"handle_notice","","Handle a Postgres notice message",46,null],[8,"GenericConnection","","A trait allowing abstraction over connections and transactions",null,null],[10,"execute","","Like `Connection::execute`.",47,null],[10,"query","","Like `Connection::query`.",47,null],[10,"prepare","","Like `Connection::prepare`.",47,null],[10,"prepare_cached","","Like `Connection::prepare_cached`.",47,null],[10,"transaction","","Like `Connection::transaction`.",47,null],[10,"batch_execute","","Like `Connection::batch_execute`.",47,null],[10,"is_active","","Like `Connection::is_active`.",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"handle_notice","","",48,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",1,null],[11,"fmt","","",49,null],[11,"connect","","Creates a new connection to a Postgres database.",49,{"inputs":[{"name":"t"},{"name":"tlsmode"}],"output":{"name":"result"}}],[11,"execute","","Executes a statement, returning the number of rows modified.",49,null],[11,"query","","Executes a statement, returning the resulting rows.",49,null],[11,"transaction","","Begins a new transaction.",49,null],[11,"transaction_with","","Begins a new transaction with the specified configuration.",49,null],[11,"prepare","","Creates a new prepared statement.",49,null],[11,"prepare_cached","","Creates a cached prepared statement.",49,null],[11,"transaction_isolation","","Returns the isolation level which will be used for future transactions.",49,null],[11,"set_transaction_config","","Sets the configuration that will be used for future transactions.",49,null],[11,"batch_execute","","Execute a sequence of SQL statements.",49,null],[11,"notifications","","Returns a structure providing access to asynchronous notifications.",49,null],[11,"cancel_data","","Returns information used to cancel pending queries.",49,null],[11,"parameter","","Returns the value of the specified Postgres backend parameter, such as\n`timezone` or `server_version`.",49,null],[11,"set_notice_handler","","Sets the notice handler for the connection, returning the old handler.",49,null],[11,"is_desynchronized","","Returns whether or not the stream has been desynchronized due to an\nerror in the communication channel with the server.",49,null],[11,"is_active","","Determines if the `Connection` is currently &quot;active&quot;, that is, if there\nare no active transactions.",49,null],[11,"finish","","Consumes the connection, closing it.",49,null],[11,"execute","","",49,null],[11,"query","","",49,null],[11,"prepare","","",49,null],[11,"prepare_cached","","",49,null],[11,"transaction","","",49,null],[11,"batch_execute","","",49,null],[11,"is_active","","",49,null],[11,"execute","postgres::transaction","",33,null],[11,"query","","",33,null],[11,"prepare","","",33,null],[11,"prepare_cached","","",33,null],[11,"transaction","","",33,null],[11,"batch_execute","","",33,null],[11,"is_active","","",33,null],[14,"accepts!","postgres","Generates a simple implementation of `ToSql::accepts` which accepts the\ntypes passed to it.",null,null],[14,"to_sql_checked!","","Generates an implementation of `ToSql::to_sql_checked`.",null,null],[11,"fmt","postgres::tls","",50,null],[11,"read","","",50,null],[11,"write","","",50,null],[11,"flush","","",50,null],[11,"get_ref","","",50,null],[11,"get_mut","","",50,null],[11,"as_raw_fd","","",50,null]],"paths":[[3,"CancelData"],[4,"TlsMode"],[3,"DbError"],[4,"SqlState"],[4,"ConnectError"],[4,"ErrorPosition"],[4,"Error"],[3,"OpenSsl"],[3,"SecurityFramework"],[8,"TlsStream"],[8,"TlsHandshake"],[3,"Notification"],[3,"Notifications"],[3,"Iter"],[3,"BlockingIter"],[3,"TimeoutIter"],[3,"UserInfo"],[3,"ConnectParams"],[4,"ConnectTarget"],[8,"IntoConnectParams"],[8,"RowIndex"],[3,"Rows"],[3,"Iter"],[3,"Row"],[3,"LazyRows"],[4,"Format"],[8,"ReadWithInfo"],[8,"WriteWithInfo"],[3,"Statement"],[3,"Column"],[3,"CopyInfo"],[4,"IsolationLevel"],[3,"Config"],[3,"Transaction"],[4,"Type"],[4,"Date"],[4,"Timestamp"],[4,"Kind"],[4,"IsNull"],[8,"FromSql"],[8,"ToSql"],[3,"SessionInfo"],[3,"Field"],[3,"Other"],[3,"WasNull"],[3,"WrongType"],[8,"HandleNotice"],[8,"GenericConnection"],[3,"LoggingNoticeHandler"],[3,"Connection"],[3,"Stream"]]};
initSearch(searchIndex);
